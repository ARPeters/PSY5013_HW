xmat[,10]<-(xmat[,7]/m)*xmat[,1]
xmat[,11]<-(xmat[,7]/m)*xmat[,2]
#12th and 13th columns are going to represent interactions between Strong1*Weak1 and Strong2*Weak2
xmat[,12]<-xmat[,1]*xmat[,4]
xmat[,13]<-xmat[,2]*xmat[,5]
#14th and 15th columns are going to represent interactions between heaviside function and strong1/strong2 respectively
for(j in 1:length(xmat[,7])){
xmat[j,14]<-ifelse(xmat[j,7]<=mhalf, 0, xmat[j,1])
xmat[j,15]<-ifelse(xmat[j,7]<=mhalf, 0, xmat[j,2])
}
dsMaster<-as.data.frame(xmat)
colnames(dsMaster)<-c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "intForFt", "logtStrong1", "logtStrong2", "tStrong1", "tStrong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H")
#Strong and Weak variables, plust two heaviside function variables
dsLog<-as.matrix(dsMaster[,c(1:6, 8:15)])
eventTimesMaybe<-runif(n, 1, m)
dataLog<-permalgorithm(n, m, Xmat=dsLog, XmatNames=c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "logtStrong1", "logtStrong2", "tStrong1", "tStrong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H"), eventRandom=eventTimesMaybe, betas=betas)
attach(dataLog)
survobjectLog<-Surv(time=Start, time2=Stop, Event==1)
#Creating the cox models for each set of variables
testControl<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3, data=dataLog, ties="breslow")
testH<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1H + Strong2H, data=dataLog, ties="breslow")
testInt<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1Weak1 + Strong2Weak2, data=dataLog, ties="breslow")
testLog<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + logtStrong1 + logtStrong2, data=dataLog, ties="breslow")
testT<-coxph(survobjectLog ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + tStrong1 + tStrong2, data=dataLog, ties="breslow")
#Getting cv error for each model
cvF<-cvFolds(n=length(dataLog$Event), K=10)
cvTestH<-cvTool(call=testH, y=dataLog$Event, folds=cvF)
cvTestI<-cvTool(call=testInt, y=dataLog$Event, folds=cvF)
cvTestLog<-cvTool(call=testLog, y=dataLog$Event, folds=cvF)
cvTestC<-cvTool(call=testControl, y=dataLog$Event, folds=cvF)
cvTestT<-cvTool(call=testT, y=dataLog$Event, folds=cvF)
predTestControl<-prediction(testControl$linear.predictors, dataLog$Event)
perfTestControl<-performance(predTestControl, measure="auc")
AUCC<-as.numeric(perfTestControl@y.values)
predTestH<-prediction(testH$linear.predictors, dataLog$Event)
perfTestH<-performance(predTestH, measure="auc")
AUCH<-as.numeric(perfTestH@y.values)
predTestI<-prediction(testInt$linear.predictors, dataLog$Event)
perfTestI<-performance(predTestI, measure="auc")
AUCI<-as.numeric(perfTestI@y.values)
predTestLog<-prediction(testLog$linear.predictors, dataLog$Event)
perfTestLog<-performance(predTestLog, measure="auc")
AUCLog<-as.numeric(perfTestLog@y.values)
predTestT<-prediction(testT$linear.predictors, dataLog$Event)
perfTestT<-performance(predTestT, measure="auc")
AUCT<-as.numeric(perfTestT@y.values)
detach(dataLog)
#Getting AIC and BIC for each model
AICC<-(-2*testControl$loglik[2])+(2*(length(testControl$coefficients)))
BICC<-(-2*testControl$loglik[2])+(log(n)*(length(testControl$coefficients)))
AICH<-(-2*testH$loglik[2])+(2*(length(testH$coefficients)))
BICH<-(-2*testH$loglik[2])+(log(n)*(length(testH$coefficients)))
AICI<-(-2*testControl$loglik[2])+(2*(length(testInt$coefficients)))
BICI<-(-2*testControl$loglik[2])+(log(n)*(length(testInt$coefficients)))
AICLog<-(-2*testLog$loglik[2])+(2*(length(testLog$coefficients)))
BICLog<-(-2*testLog$loglik[2])+(log(n)*(length(testLog$coefficients)))
AICT<-(-2*testT$loglik[2])+(2*(length(testT$coefficients)))
BICT<-(-2*testT$loglik[2])+(log(n)*(length(testT$coefficients)))
fitTable[i,1]<-AICC
fitTable[i,2]<-AICH
fitTable[i,3]<-AICI
fitTable[i,4]<-AICLog
fitTable[i,5]<-AICT
fitTable[i,6]<-BICC
fitTable[i,7]<-BICH
fitTable[i,8]<-BICI
fitTable[i,9]<-BICLog
fitTable[i,10]<-BICT
fitTable[i,11]<-cvTestC
fitTable[i,12]<-cvTestH
fitTable[i,13]<-cvTestI
fitTable[i,14]<-cvTestLog
fitTable[i,15]<-cvTestT
fitTable[i,16]<-AUCC
fitTable[i,17]<-AUCH
fitTable[i,18]<-AUCI
fitTable[i,19]<-AUCLog
fitTable[i,20]<-AUCT
AICPropTable<-fitTable[,c(1:5)]
BICPropTable<-fitTable[,c(6:10)]
cvPropTable<-fitTable[,c(11:15)]
AUCPropTable<-fitTable[,c(16:20)]
}
for(m in 1:length(AICPropTable[,1])){
AICPropTable$WAICC[m]<-ifelse(AICPropTable[m,1]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICH[m]<-ifelse(AICPropTable[m,2]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICI[m]<-ifelse(AICPropTable[m,3]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$CAICLog[m]<-ifelse(AICPropTable[m,4]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICT[m]<-ifelse(AICPropTable[m,5]==min(AICPropTable[m,1:5]),1,0)
BICPropTable$WBICC[m]<-ifelse(BICPropTable[m,1]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICH[m]<-ifelse(BICPropTable[m,2]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICI[m]<-ifelse(BICPropTable[m,3]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$CBICLog[m]<-ifelse(BICPropTable[m,4]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICT[m]<-ifelse(BICPropTable[m,5]==min(BICPropTable[m,1:5]),1,0)
cvPropTable$WcvC[m]<-ifelse(cvPropTable[m,1]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvH[m]<-ifelse(cvPropTable[m,2]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvI[m]<-ifelse(cvPropTable[m,3]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$CcvLog[m]<-ifelse(cvPropTable[m,4]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvT[m]<-ifelse(cvPropTable[m,5]==min(cvPropTable[m,1:5]),1,0)
AUCPropTable$WAUCC[m]<-ifelse(AUCPropTable[m,1]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCH[m]<-ifelse(AUCPropTable[m,2]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCI[m]<-ifelse(AUCPropTable[m,3]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$CAUCLog[m]<-ifelse(AUCPropTable[m,4]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCT[m]<-ifelse(AUCPropTable[m,5]==max(AUCPropTable[m,1:5]),1,0)
}
print(AICPropTable)
print(BICPropTable)
print(cvPropTable)
print(AUCPropTable)
AICPropWC[l]<-sum(AICPropTable$WAICC)/reps
AICPropWH[l]<-sum(AICPropTable$WAICH)/reps
AICPropWI[l]<-sum(AICPropTable$WAICI)/reps
AICPropCorrect[l]<-sum(AICPropTable$CAICLog)/reps
AICPropWT[l]<-sum(AICPropTable$WAICT)/reps
BICPropWC[l]<-sum(BICPropTable$WBICC)/reps
BICPropWH[l]<-sum(BICPropTable$WBICH)/reps
BICPropWI[l]<-sum(BICPropTable$WBICI)/reps
BICPropCorrect[l]<-sum(BICPropTable$CBICLog)/reps
BICPropWT[l]<-sum(BICPropTable$WBICT)/reps
cvPropWC[l]<-sum(cvPropTable$WcvC)/reps
cvPropWH[l]<-sum(cvPropTable$WcvH)/reps
cvPropWI[l]<-sum(cvPropTable$WcvI)/reps
cvPropCorrect[l]<-sum(cvPropTable$CcvLog)/reps
cvPropWT[l]<-sum(cvPropTable$WcvT)/reps
AUCPropWC[l]<-sum(AUCPropTable$WAUCC)/reps
AUCPropWH[l]<-sum(AUCPropTable$WAUCH)/reps
AUCPropWI[l]<-sum(AUCPropTable$WAUCI)/reps
AUCPropCorrect[l]<-sum(AUCPropTable$CAUCLog)/reps
AUCPropWT[l]<-sum(AUCPropTable$WAUCT)/reps
print(testLog)
print(c("Proportion of times AIC selected no-time model across weights."))
print(AICPropWC)
print(c("Proportion of times AIC selected heaviside model across weights."))
print(AICPropWH)
print(c("Proportion of times AIC selected Interaction model across weights"))
print(AICPropWI)
print(c("Proportion of times AIC selected (correct) Log model across weights"))
print(AICPropCorrect)
print(c("Proportion of times AIC selected time model across weights"))
print(AICPropWT)
print(c("Proportion of times BIC selected no-time model across weights."))
print(BICPropWC)
print(c("Proportion of times BIC selected heaviside model across weights."))
print(BICPropWH)
print(c("Proportion of times BIC selected Interaction model across weights"))
print(BICPropWI)
print(c("Proportion of times BIC selected (correct) Log model across weights"))
print(BICPropCorrect)
print(c("Proportion of times BIC selected time model across weights"))
print(BICPropWT)
print(c("Proportion of times cv selected no-time model across weights."))
print(cvPropWC)
print(c("Proportion of times cv selected heaviside model across weights."))
print(cvPropWH)
print(c("Proportion of times cv selected Interaction model across weights"))
print(cvPropWI)
print(c("Proportion of times cv selected (correct) Log model across weights"))
print(cvPropCorrect)
print(c("Proportion of times cv selected time model across weights"))
print(cvPropWT)
print(c("Proportion of times AUC selected no-time model across weights."))
print(AUCPropWC)
print(c("Proportion of times AUC selected heaviside model across weights."))
print(AUCPropWH)
print(c("Proportion of times AUC selected Interaction model across weights"))
print(AUCPropWI)
print(c("Proportion of times AUC selected (correct) Log model across weights"))
print(AUCPropCorrect)
print(c("Proportion of times AUC selected time model across weights"))
print(AUCPropWT)
}
rm(list = ls(all.names = TRUE))
rm(list = ls(all.names = TRUE))
library(cvTools)
library(survsim)
library(survival)
library(foreign)
library(PermAlgo)
library(ROCR)
ftw<-c(0.7)
#ftw<-c(0, 0.01, 0.35, 0.7)
#ftw<-c(1:100)/100
cvPropWL<-vector(length=length(ftw))
cvPropWC<-vector(length=length(ftw))
cvPropWH<-vector(length=length(ftw))
cvPropWI<-vector(length=length(ftw))
cvPropCT<-vector(length=length(ftw))
AUCPropWL<-vector(length=length(ftw))
AUCPropWC<-vector(length=length(ftw))
AUCPropWH<-vector(length=length(ftw))
AUCPropWI<-vector(length=length(ftw))
AUCPropCT<-vector(length=length(ftw))
AICPropWL<-vector(length=length(ftw))
AICPropWC<-vector(length=length(ftw))
AICPropWH<-vector(length=length(ftw))
AICPropWI<-vector(length=length(ftw))
AICPropCT<-vector(length=length(ftw))
BICPropWL<-vector(length=length(ftw))
BICPropWC<-vector(length=length(ftw))
BICPropWH<-vector(length=length(ftw))
BICPropWI<-vector(length=length(ftw))
BICPropCT<-vector(length=length(ftw))
#For: weight of a specific time function (heaviside, the last one)
for(l in 1:length(ftw)){
#Declaring Betas: first, we are looking at the heaviside function, so the last two time-dependent
#variables are given betas, all else are given 0 weight.
betas<-c(0.7, 0.7, 0.7, 0.1, 0.1, 0.1, 0, 0, ftw[l], ftw[l], 0, 0, 0, 0)
#Creating a table of AICs and BIC values
reps<-5
fitTable<-data.frame(matrix(ncol=20, nrow=reps, ))
colnames(fitTable)<-c("AICC",  "AICH", "AICI", "AICLog", "AICT", "BICC","BICH", "BICI","BICLog", "BICT" , "cvC", "cvH", "cvI", "cvLog", "cvT", "AUCC", "AUCH", "AUCI", "AUCLog", "AUCT")
#For this weight of specific time function, create this many sets of data
for(i in 1:reps){
n=500
m=24
mhalf<-m/2
xmat<-matrix(nrow=n*m, ncol=15)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,5]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,6]<-rep(round(rbinom(n,1, 0.5)), each=m)
#7th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,7]<-rep.int(1:m, times=n)
#8th and 9th columns are going to represent the log of time * Strong1 and Strong2, respectively.
xmat[,8]<-log(xmat[,7])*xmat[,1]
xmat[,9]<-log(xmat[,7])*xmat[,2]
#10th and 11th columns are going to represent time * Strong1 and Strong2, respectively
xmat[,10]<-(xmat[,7]/m)*xmat[,1]
xmat[,11]<-(xmat[,7]/m)*xmat[,2]
#12th and 13th columns are going to represent interactions between Strong1*Weak1 and Strong2*Weak2
xmat[,12]<-xmat[,1]*xmat[,4]
xmat[,13]<-xmat[,2]*xmat[,5]
#14th and 15th columns are going to represent interactions between heaviside function and strong1/strong2 respectively
for(j in 1:length(xmat[,7])){
xmat[j,14]<-ifelse(xmat[j,7]<=mhalf, 0, xmat[j,1])
xmat[j,15]<-ifelse(xmat[j,7]<=mhalf, 0, xmat[j,2])
}
dsMaster<-as.data.frame(xmat)
colnames(dsMaster)<-c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "intForFt", "logtStrong1", "logtStrong2", "tStrong1", "tStrong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H")
#Strong and Weak variables, plust two heaviside function variables
dsT<-as.matrix(dsMaster[,c(1:6, 8:15)])
eventTimesMaybe<-runif(n, 1, m)
dataT<-permalgorithm(n, m, Xmat=dsT, XmatNames=c("Strong1", "Strong2", "Strong3", "Weak1", "Weak2", "Weak3", "logtStrong1", "logtStrong2", "tStrong1", "tStrong2", "Strong1Weak1", "Strong2Weak2", "Strong1H", "Strong2H"), eventRandom=eventTimesMaybe, betas=betas)
attach(dataT)
survobjectT<-Surv(time=Start, time2=Stop, Event==1)
#Creating the cox models for each set of variables
testControl<-coxph(survobjectT ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3, data=dataT, ties="breslow")
testH<-coxph(survobjectT ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1H + Strong2H, data=dataT, ties="breslow")
testInt<-coxph(survobjectT ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + Strong1Weak1 + Strong2Weak2, data=dataT, ties="breslow")
testLog<-coxph(survobjectT ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + logtStrong1 + logtStrong2, data=dataT, ties="breslow")
testT<-coxph(survobjectT ~ Strong1 + Strong2 + Strong3 + Weak1 + Weak2 + Weak3 + tStrong1 + tStrong2, data=dataT, ties="breslow")
#Getting cv error for each model
cvF<-cvFolds(n=length(dataT$Event), K=10)
cvTestH<-cvTool(call=testH, y=dataT$Event, folds=cvF)
cvTestI<-cvTool(call=testInt, y=dataT$Event, folds=cvF)
cvTestLog<-cvTool(call=testLog, y=dataT$Event, folds=cvF)
cvTestC<-cvTool(call=testControl, y=dataT$Event, folds=cvF)
cvTestT<-cvTool(call=testT, y=dataT$Event, folds=cvF)
predTestControl<-prediction(testControl$linear.predictors, dataT$Event)
perfTestControl<-performance(predTestControl, measure="auc")
AUCC<-as.numeric(perfTestControl@y.values)
predTestH<-prediction(testH$linear.predictors, dataT$Event)
perfTestH<-performance(predTestH, measure="auc")
AUCH<-as.numeric(perfTestH@y.values)
predTestI<-prediction(testInt$linear.predictors, dataT$Event)
perfTestI<-performance(predTestI, measure="auc")
AUCI<-as.numeric(perfTestI@y.values)
predTestLog<-prediction(testLog$linear.predictors, dataT$Event)
perfTestLog<-performance(predTestLog, measure="auc")
AUCLog<-as.numeric(perfTestLog@y.values)
predTestT<-prediction(testT$linear.predictors, dataT$Event)
perfTestT<-performance(predTestT, measure="auc")
AUCT<-as.numeric(perfTestT@y.values)
detach(dataT)
#Getting AIC and BIC for each model
AICC<-(-2*testControl$loglik[2])+(2*(length(testControl$coefficients)))
BICC<-(-2*testControl$loglik[2])+(log(n)*(length(testControl$coefficients)))
AICH<-(-2*testH$loglik[2])+(2*(length(testH$coefficients)))
BICH<-(-2*testH$loglik[2])+(log(n)*(length(testH$coefficients)))
AICI<-(-2*testInt$loglik[2])+(2*(length(testInt$coefficients)))
BICI<-(-2*testInt$loglik[2])+(log(n)*(length(testInt$coefficients)))
AICLog<-(-2*testLog$loglik[2])+(2*(length(testLog$coefficients)))
BICLog<-(-2*testLog$loglik[2])+(log(n)*(length(testLog$coefficients)))
AICT<-(-2*testT$loglik[2])+(2*(length(testT$coefficients)))
BICT<-(-2*testT$loglik[2])+(log(n)*(length(testT$coefficients)))
fitTable[i,1]<-AICC
fitTable[i,2]<-AICH
fitTable[i,3]<-AICI
fitTable[i,4]<-AICLog
fitTable[i,5]<-AICT
fitTable[i,6]<-BICC
fitTable[i,7]<-BICH
fitTable[i,8]<-BICI
fitTable[i,9]<-BICLog
fitTable[i,10]<-BICT
fitTable[i,11]<-cvTestC
fitTable[i,12]<-cvTestH
fitTable[i,13]<-cvTestI
fitTable[i,14]<-cvTestLog
fitTable[i,15]<-cvTestT
fitTable[i,16]<-AUCC
fitTable[i,17]<-AUCH
fitTable[i,18]<-AUCI
fitTable[i,19]<-AUCLog
fitTable[i,20]<-AUCT
AICPropTable<-fitTable[,c(1:5)]
BICPropTable<-fitTable[,c(6:10)]
cvPropTable<-fitTable[,c(11:15)]
AUCPropTable<-fitTable[,c(16:20)]
}
for(m in 1:length(AICPropTable[,1])){
AICPropTable$WAICC[m]<-ifelse(AICPropTable[m,1]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICH[m]<-ifelse(AICPropTable[m,2]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICI[m]<-ifelse(AICPropTable[m,3]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$WAICLog[m]<-ifelse(AICPropTable[m,4]==min(AICPropTable[m,1:5]),1,0)
AICPropTable$CAICT[m]<-ifelse(AICPropTable[m,5]==min(AICPropTable[m,1:5]),1,0)
BICPropTable$WBICC[m]<-ifelse(BICPropTable[m,1]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICH[m]<-ifelse(BICPropTable[m,2]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICI[m]<-ifelse(BICPropTable[m,3]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$WBICLog[m]<-ifelse(BICPropTable[m,4]==min(BICPropTable[m,1:5]),1,0)
BICPropTable$CBICT[m]<-ifelse(BICPropTable[m,5]==min(BICPropTable[m,1:5]),1,0)
cvPropTable$WcvC[m]<-ifelse(cvPropTable[m,1]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvH[m]<-ifelse(cvPropTable[m,2]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvI[m]<-ifelse(cvPropTable[m,3]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$WcvLog[m]<-ifelse(cvPropTable[m,4]==min(cvPropTable[m,1:5]),1,0)
cvPropTable$CcvT[m]<-ifelse(cvPropTable[m,5]==min(cvPropTable[m,1:5]),1,0)
AUCPropTable$WAUCC[m]<-ifelse(AUCPropTable[m,1]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCH[m]<-ifelse(AUCPropTable[m,2]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCI[m]<-ifelse(AUCPropTable[m,3]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$WAUCLog[m]<-ifelse(AUCPropTable[m,4]==max(AUCPropTable[m,1:5]),1,0)
AUCPropTable$CAUCT[m]<-ifelse(AUCPropTable[m,5]==max(AUCPropTable[m,1:5]),1,0)
}
print(AICPropTable)
print(BICPropTable)
print(cvPropTable)
print(AUCPropTable)
AICPropWC[l]<-sum(AICPropTable$WAICC)/reps
AICPropWH[l]<-sum(AICPropTable$WAICH)/reps
AICPropWI[l]<-sum(AICPropTable$WAICI)/reps
AICPropWL[l]<-sum(AICPropTable$WAICLog)/reps
AICPropCT[l]<-sum(AICPropTable$CAICT)/reps
BICPropWC[l]<-sum(BICPropTable$WBICC)/reps
BICPropWH[l]<-sum(BICPropTable$WBICH)/reps
BICPropWI[l]<-sum(BICPropTable$WBICI)/reps
BICPropWL[l]<-sum(BICPropTable$WBICLog)/reps
BICPropCT[l]<-sum(BICPropTable$CBICT)/reps
cvPropWC[l]<-sum(cvPropTable$WcvC)/reps
cvPropWH[l]<-sum(cvPropTable$WcvH)/reps
cvPropWI[l]<-sum(cvPropTable$WcvI)/reps
cvPropWL[l]<-sum(cvPropTable$WcvLog)/reps
cvPropCT[l]<-sum(cvPropTable$CcvT)/reps
AUCPropWC[l]<-sum(AUCPropTable$WAUCC)/reps
AUCPropWH[l]<-sum(AUCPropTable$WAUCH)/reps
AUCPropWI[l]<-sum(AUCPropTable$WAUCI)/reps
AUCPropWL[l]<-sum(AUCPropTable$WAUCLog)/reps
AUCPropCT[l]<-sum(AUCPropTable$CAUCT)/reps
print(testT)
print(c("Proportion of times AIC selected no-time model across weights."))
print(AICPropWC)
print(c("Proportion of times AIC selected heaviside model across weights."))
print(AICPropWH)
print(c("Proportion of times AIC selected Interaction model across weights"))
print(AICPropWI)
print(c("Proportion of times AIC selected Log model across weights"))
print(AICPropWL)
print(c("Proportion of times AIC selected (correct) time model across weights"))
print(AICPropCT)
print(c("Proportion of times BIC selected no-time model across weights."))
print(BICPropWC)
print(c("Proportion of times BIC selected heaviside model across weights."))
print(BICPropWH)
print(c("Proportion of times BIC selected Interaction model across weights"))
print(BICPropWI)
print(c("Proportion of times BIC selected Log model across weights"))
print(BICPropWL)
print(c("Proportion of times BIC selected (correct) time model across weights"))
print(BICPropCT)
print(c("Proportion of times cv selected no-time model across weights."))
print(cvPropWC)
print(c("Proportion of times cv selected heaviside model across weights."))
print(cvPropWH)
print(c("Proportion of times cv selected Interaction model across weights"))
print(cvPropWI)
print(c("Proportion of times cv selected Log model across weights"))
print(cvPropWL)
print(c("Proportion of times cv selected (correct) time model across weights"))
print(cvPropCT)
print(c("Proportion of times AUC selected no-time model across weights."))
print(AUCPropWC)
print(c("Proportion of times AUC selected heaviside model across weights."))
print(AUCPropWH)
print(c("Proportion of times AUC selected Interaction model across weights"))
print(AUCPropWI)
print(c("Proportion of times AUC selected Log model across weights"))
print(AUCPropWL)
print(c("Proportion of times AUC selected (correct) time model across weights"))
print(AUCPropCT)
}
getwed()
getwd()
setwd("~/GitHub/PSY5013_HW")
library(foreign)
?read.dat()
ds<-read.table("Student_Survey_Data.dat")
ds
colnames(ds)<-c("ID", "Gender", "Age", "Party", "Marijuana")
head(ds)
glm(Marijuana~Gender, data=ds)
ds$Gender<-ifelse(ds$Gender==1, 0, 1)
head(ds)
ds<-read.table("Student_Survey_Data.dat")
colnames(ds)<-c("ID", "Gender", "Age", "Party", "Marijuana")
head(ds)
factor(ds$Gender)
summarize(ds$Gender)
summary(ds$Gender)
levels(ds$Gender)
level(ds$Gender)
ds$Gender<-ifelse(ds$Gender==1, 0, 1)
factor(ds$Gender)
glm(Marijuana~Gender, data=ds)
ds<-read.table("Student_Survey_Data.dat")
colnames(ds)<-c("ID", "Gender", "Age", "Party", "Marijuana")
head(ds)
ds$Female<-ifelse(ds$Gender==1, 0, 1)
factor(ds$Female)
glm(Marijuana~Gender, data=ds)
glm(Marijuana~Female, data=ds)
lm(Marijuana~Female, data=ds)
glm(Marijuana~Female, data=ds)
MarijuanaByGender<-glm(Marijuana~Female, data=ds)
MarijuanaByGender
str(MarijuanaByGender)
??regression
?ttest()
?ANOVA()
summary(MarijuanaByGender)
MarijuanaByGender<-lm(Marijuana~Female, data=ds)
summary(MarijuanaByGender)
length(ds$Female)
colnames(ds)
MarijuanaByGender<-glm(Marijuana~Female, data=ds)
summary(MarijuanaByGender)
summary(MarijuanaByGender)
MarijuanaByGender<-lm(Marijuana~Female, data=ds)
summary(MarijuanaByGender)
ds$DParty<-ifelse(ds$Party==1, 0, ifelse(ds$Party==2, 1, 3))
head(ds)
factor(ds$Party)
factor(ds$DParty)
ds$DParty<-ifelse(ds$Party==1, 0, ifelse(ds$Party==2, 1, 2))
head(ds)
factor(ds$Party)
factor(ds$DParty)
getwd()
MarijuanaByPart<-lm(Marijuana~DParty, data=ds)
MarijuanaByParty<-lm(Marijuana~DParty, data=ds)
summary(MarijuanaByParty)
MarijuanaByParty<-aov(Marijuana~DParty, data=ds)
summary(MarijuanaByParty)
MarijuanaByParty
MarijuanaByParty<-aov(Marijuana~DParty, data=ds)
MarijuanaByParty<-lm(Marijuana~DParty, data=ds)
summary(MarijuanaByParty)
anova(MarijuanaByParty)
pairwise.t.test(ds$Marijuana, ds$DParty)
summary(pairwise.t.test(ds$Marijuana, ds$DParty))
str(pairwise.t.test(ds$Marijuana, ds$DParty))
summary(MarijuanaByParty)
str(MarijuanaByParty)
pairwise.t.test(ds$Marijuana, ds$DParty)
ds$DParty<-ifelse(ds$Party==1, 0, ifelse(ds$Party==3, 1, 2))
MarijuanaByParty<-lm(Marijuana~DParty, data=ds)
str(MarijuanaByParty)
pairwise.t.test(ds$Marijuana, ds$DParty)
ds$DParty<-ifelse(ds$Party==1, 0, ifelse(ds$Party==2, 1, 2))
MarijuanaByParty<-lm(Marijuana~DParty, data=ds)
summary(MarijuanaByParty)
pairwise.t.test(ds$Marijuana, ds$DParty)
str(pairwise.t.test(ds$Marijuana, ds$DParty))
summary(MarijuanaByParty)
MarijuanaByParty<-anova(lm(Marijuana~DParty, data=ds))
summary(MarijuanaByParty)
MarijuanaByParty
str(MarijuanaByParty)
MarijuanaByParty<-(lm(Marijuana~DParty, data=ds))
MarijuanaByParty
summary(MarijuanaByParty)
MarijuanaByParty<-(lm(Marijuana~DEM+IND, data=ds))
ds$DEM<-ifelse(ds$Party==2, 1, 0)
ds$IND<-ifelse(ds$Party==3, 1, 0)
MarijuanaByParty<-(lm(Marijuana~DEM+IND, data=ds))
MarijuanaByParty
summary(MarijuanaByParty)
pairwise.t.test(ds$Marijuana, ds$DEM, ds$IND)
summary(MarijuanaByParty)
str(MarijuanaByParty)
summary(MarijuanaByParty)
2.1589+.7161
2.1589+.384
ds$DEMUE<-ifelse(ds$Party==2, 1, ifelse(ds$Party=1, 0, -1))
ds$DEMUE<-ifelse(ds$Party==2, 1, ifelse(ds$Party==1, 0, -1))
ds$REPUE<-ifelse(ds$Party==1, 1, ifelse(ds$Party==2, 0, -1))
MarijuanaByParty<-(lm(Marijuana~DEMUE+REPUE, data=ds))
summary(MarijuanaByParty)
2.53 - .35 +.37
2.53-.37
(2.55+2.88+2.16)/3
library(knitr)
head(ds)
