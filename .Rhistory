xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
head(xmat)
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
head(dsMaster)
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
test
rm(list = ls(all.names = TRUE))
n=5000
m=365
xmat<-matrix(nrow=n*m, ncol=11)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
#5th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,5]<-rep.int(1:m, times=n)
xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
#Now permute it!
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
test
rm(list = ls(all.names = TRUE))
n=5000
m=1000
xmat<-matrix(nrow=n*m, ncol=11)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
#5th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,5]<-rep.int(1:m, times=n)
xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
#Now permute it!
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
test
rm(list = ls(all.names = TRUE))
n=5000
m=1000
xmat<-matrix(nrow=n*m, ncol=11)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
#5th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,5]<-rep.int(1:m, times=n)
xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
#Now permute it!
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
test
rm(list = ls(all.names = TRUE))
n=50000
m=1000
xmat<-matrix(nrow=n*m, ncol=11)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
#5th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,5]<-rep.int(1:m, times=n)
xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
#Now permute it!
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
rm(list = ls(all.names = TRUE))
n=50000
m=365
xmat<-matrix(nrow=n*m, ncol=11)
xmat[,1]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,2]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,3]<-rep(round(rbinom(n,1, 0.5)), each=m)
xmat[,4]<-rep(round(rbinom(n,1, 0.5)), each=m)
#5th column is going to be column number/time interval as if we had applied counting process to a data set
xmat[,5]<-rep.int(1:m, times=n)
xmat[,6]<-log(xmat[,5])*xmat[,1]
xmat[,7]<-log(xmat[,5])*xmat[,2]
xmat[,8]<-xmat[,5]*xmat[,5]*xmat[,1]
xmat[,9]<-xmat[,5]*xmat[,5]*xmat[,2]
xmat[,10]<-xmat[,1]*xmat[,3]
xmat[,11]<-xmat[,2]*xmat[,4]
dsMaster<-as.data.frame(xmat)
head(dsMaster)
colnames(dsMaster)<-c("X1", "X2", "X3", "X4", "intForFt", "logtX1", "logtX2", "tsquaredX1", "tsquaredX2", "X13", "X24")
#Now permute it!
dsTest<-as.matrix(dsMaster[,c(1:4, 6, 7)])
head(dsTest)
dataTest<-permalgorithm(n, m, Xmat=dsTest, XmatNames=c("X1", "X2", "X3", "X4", "logtX1", "logtX2"), betas=c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7))
head(dataTest)
dataTest[121:300,]
test<-coxph(Surv(Start, Stop, Event) ~ X1 + X2 + X3 + X4 + logtX1 + logtX2, data=dataTest)
rm(list = ls(all.names = TRUE))
library(foreign)
#Reading in Data
ds<-read.table("health.dat")
colnames(ds)<-c("case", "age", "income", "havephys", "physrec", "womrel", "lump", "suscept1", "severe1", "benefit1", "barrier1", "intent1", "comply")
#Question1
Model1<-lm(intent1~havephys+physrec,data=ds)
Model1
Model2<-lm(intent1~havephys+physrec+lump+womrel, data=ds)
Model2
Model3<-lm(intent1~havephys+physrec+lump+womrel+suscept1+severe1+benefit1+barrier1, data=ds)
Model3
Model1Coef    <-round(summary(Model1)$coefficients[,1], digits=3)
Model1Coef    <-c(Model1Coef, ".",".",".",".",".",".")
Model1Se      <-round(summary(Model1)$coefficients[,2], digits=3)
Model1Se      <-c(Model1Se, ".",".",".",".",".",".")
Model1subtable<-cbind(Model1Coef, Model1Se)
Model2Coef    <-round(summary(Model2)$coefficients[,1], digits=3)
Model2Coef    <-c(Model2Coef, ".",".",".",".")
Model2Se      <-round(summary(Model2)$coefficients[,2], digits=3)
Model2Se      <-c(Model2Se, ".",".",".",".")
Model2subtable<-cbind(Model2Coef, Model2Se)
Model3Coef    <-round(summary(Model3)$coefficients[,1], digits=3)
Model3Se      <-round(summary(Model3)$coefficients[,2], digits=3)
Model3subtable<-cbind(Model3Coef, Model3Se)
hrtable<-cbind(Model1subtable, Model2subtable, Model3subtable)
hrtable<-data.frame(hrtable)
hrtable1<-hrtable[2:9,]
hrtable1<-data.frame(hrtable1, row.names=c("havephys", "physrec", "lump", "womrel", "suscept1", "severe1", "benefit1", "barrier1"))
yhavephys <-cor(x=ds$havephys, y=ds$intent1)
yphysrec  <-cor(x=ds$physrec, y=ds$intent1)
ylump     <-cor(x=ds$lump, y=ds$intent1)
ywomrel   <-cor(x=ds$womrel, y=ds$intent1)
ysuscept  <-cor(x=ds$suscept1, y=ds$intent1)
ysevere   <-cor(x=ds$severe1, y=ds$intent1)
ybenefit  <-cor(x=ds$benefit1, y=ds$intent1)
ybarrier  <-cor(x=ds$barrier, y=ds$intent1)
cor.with.y<-round(as.vector(c(yhavephys, yphysrec, ylump, ywomrel, ysuscept, ysevere, ybenefit, ybarrier)), digits=3)
Q1table<-cbind(cor.with.y, hrtable1)
Q1table
#Question 2
Modelnull<-lm(intent1~1, data=ds)
length(ds$intent1)
summary(Modelnull)
summary(Model1)
summary(Model2)
summary(Model3)
setwd("~/GitHub/PSY5013_HW")
rm(list = ls(all.names = TRUE))
library(foreign)
#Reading in Data
ds<-read.table("health.dat")
colnames(ds)<-c("case", "age", "income", "havephys", "physrec", "womrel", "lump", "suscept1", "severe1", "benefit1", "barrier1", "intent1", "comply")
#Question1
Model1<-lm(intent1~havephys+physrec,data=ds)
Model1
Model2<-lm(intent1~havephys+physrec+lump+womrel, data=ds)
Model2
Model3<-lm(intent1~havephys+physrec+lump+womrel+suscept1+severe1+benefit1+barrier1, data=ds)
Model3
Model1Coef    <-round(summary(Model1)$coefficients[,1], digits=3)
Model1Coef    <-c(Model1Coef, ".",".",".",".",".",".")
Model1Se      <-round(summary(Model1)$coefficients[,2], digits=3)
Model1Se      <-c(Model1Se, ".",".",".",".",".",".")
Model1subtable<-cbind(Model1Coef, Model1Se)
Model2Coef    <-round(summary(Model2)$coefficients[,1], digits=3)
Model2Coef    <-c(Model2Coef, ".",".",".",".")
Model2Se      <-round(summary(Model2)$coefficients[,2], digits=3)
Model2Se      <-c(Model2Se, ".",".",".",".")
Model2subtable<-cbind(Model2Coef, Model2Se)
Model3Coef    <-round(summary(Model3)$coefficients[,1], digits=3)
Model3Se      <-round(summary(Model3)$coefficients[,2], digits=3)
Model3subtable<-cbind(Model3Coef, Model3Se)
hrtable<-cbind(Model1subtable, Model2subtable, Model3subtable)
hrtable<-data.frame(hrtable)
hrtable1<-hrtable[2:9,]
hrtable1<-data.frame(hrtable1, row.names=c("havephys", "physrec", "lump", "womrel", "suscept1", "severe1", "benefit1", "barrier1"))
yhavephys <-cor(x=ds$havephys, y=ds$intent1)
yphysrec  <-cor(x=ds$physrec, y=ds$intent1)
ylump     <-cor(x=ds$lump, y=ds$intent1)
ywomrel   <-cor(x=ds$womrel, y=ds$intent1)
ysuscept  <-cor(x=ds$suscept1, y=ds$intent1)
ysevere   <-cor(x=ds$severe1, y=ds$intent1)
ybenefit  <-cor(x=ds$benefit1, y=ds$intent1)
ybarrier  <-cor(x=ds$barrier, y=ds$intent1)
cor.with.y<-round(as.vector(c(yhavephys, yphysrec, ylump, ywomrel, ysuscept, ysevere, ybenefit, ybarrier)), digits=3)
Q1table<-cbind(cor.with.y, hrtable1)
Q1table
#Question 2
Modelnull<-lm(intent1~1, data=ds)
length(ds$intent1)
summary(Modelnull)
summary(Model1)
summary(Model2)
summary(Model3)
read.table("HW3_GPA.dat")
dsGPA<-read.table("HW3_GPA.dat")
colnames(dsGPA)
colnames(dsGPA)<-c("CGPA", "HGPA", "SAT", "SEX")
corr(dsGPA$HGPA, dsGPA$CGPA)
cor(dsGPA$HGPA, dsGPA$CGPA)
str(cor())
HcorC<-cor(dsGPA$HGPA, dsGPA$CGPA)
str(HcorC)
HregC<-lm(CGPA~HGPA, data=dsGPA)
str(HregC)
HregCresiduals<-HregC$residuals
HregCresiduals
dsGPA<-cbind(dsGPA, HregCresiduals)
SATcorC<-cor(CregHresiduals, SAT)
SATcorC<-cor(CregHresiduals, SAT, data=dsGPA)
SATcorC<-cor(CregHresiduals, dsGPA$SAT)
SATcorC<-cor(dsGPA$CregHresiduals, dsGPA$SAT)
CregHCresiduals<-as.vector(CregH$residuals)
CregH<-lm(CGPA~HGPA, data=dsGPA)
str(CregH)
CregHCresiduals<-as.vector(CregH$residuals)
dsGPA<-cbind(dsGPA, CregH$residuals)
SATcorC<-cor(dsGPA$CregHresiduals, dsGPA$SAT)
CregHCresiduals
#Regress CGPA onto HGPA; compute residuals; find correlation between SAT and residuals of CGPA
CregH<-lm(CGPA~HGPA, data=dsGPA)
str(CregH)
CregHresiduals<-as.vector(CregH$residuals)
dsGPA<-cbind(dsGPA, CregH$residuals)
SATcorC<-cor(dsGPA$CregHresiduals, dsGPA$SAT)
dsGPA$SAT
dsGPA$CregHresiduals
CregHresiduals
CregH<-lm(CGPA~HGPA, data=dsGPA)
str(CregH)
CregHresiduals<-as.vector(CregH$residuals)
dsGPA<-cbind(dsGPA, CregHresiduals)
SATcorC<-cor(dsGPA$CregHresiduals, dsGPA$SAT)
SATcorC
ScorC<-cor(dsGPA$SAT, dsGPA$CGPA)
ScorC<-cor(dsGPA$SAT, dsGPA$CGPA)
ScorH<-cor(dsGPA$SAT, dsGPA$HGPA)
CcorH(dsGPA$CGPA, dsGPA$HGPA)
ScorC
ScorH
Ccor
CcorH<-(dsGPA$CGPA, dsGPA$HGPA)
ScorC
ScorH
Ccor
CcorH
ScorC<-cor(dsGPA$SAT, dsGPA$CGPA)
ScorH<-cor(dsGPA$SAT, dsGPA$HGPA)
CcorH<-(dsGPA$CGPA, dsGPA$HGPA)
ScorC
ScorH
CcorH
ScorC<-cor(dsGPA$SAT, dsGPA$CGPA)
ScorH<-cor(dsGPA$SAT, dsGPA$HGPA)
CcorH<-cor(dsGPA$CGPA, dsGPA$HGPA)
ScorC
ScorH
CcorH
num<-(.64)-(.49*.39)
denom<-(sqrt(1-(.49*.49)))(sqrt(1-(.39*.39)))
(sqrt(1-(.49*.49)))(sqrt(1-(.39*.39)))
denom<-(sqrt(1-(.49*.49)))*(sqrt(1-(.39*.39)))
num/denom
SATcorC
CcorH
num<-(.64)-(.49*.39)
denom<-(sqrt(1-(.39*.39)))
num/denom
ModelSATonCH<-lm(SAT~CGPA+HGPA, data=dsGPA)
str(ModelSATonCH)
summary(ModelSATonCH)
ModelSATonH<-lm(SAT~HGPA, data=dsGPA)
summary(ModelSATonH)
summary(ModelSATonCH)
summary(ModelSATonH)
sqrt(.24)
SregH<-lm(SAT~HGPA, data=dsGPA)
SregH<-lm(SAT~HGPA, data=dsGPA)
SregHresiduals<-as.vector(SregH$residuals)
dsGPA<-cbind(dsGPA, CregHresiduals)
SresidCorCresid<-cor(dsGPA$SregHresiduals, dsGPA$CregHresiduals)
SregH<-lm(SAT~HGPA, data=dsGPA)
SregHresiduals<-as.vector(SregH$residuals)
dsGPA<-cbind(dsGPA, CregHresiduals)
SresidCorCresid<-cor(dsGPA$SregHresiduals, dsGPA$CregHresiduals)
SregHresiduals
dsGPA<-cbind(dsGPA, SregHresiduals)
SresidCorCresid<-cor(dsGPA$SregHresiduals, dsGPA$CregHresiduals)
SresidCorCresid
summary(ModelSATonH)
summary(ModelSATonCH)
num<-(.48)-(.24)
denom<-1-(.24)
num/denom
num<-(.48)-(.24)
denom<-1-(.24)
num/denom
ModelSATonH<-lm(SAT~HGPA, data=dsGPA)
summary(ModelSATonH)
num/denom
sqrt(.3158)
anoba(Model1, Model2, Model3)
anova(Model1, Model2, Model3)
rm(list = ls(all.names = TRUE))
library(foreign)
#Reading in Data
ds<-read.table("health.dat")
colnames(ds)<-c("case", "age", "income", "havephys", "physrec", "womrel", "lump", "suscept1", "severe1", "benefit1", "barrier1", "intent1", "comply")
#Question1
Model1<-lm(intent1~havephys+physrec,data=ds)
Model1
Model2<-lm(intent1~havephys+physrec+lump+womrel, data=ds)
Model2
Model3<-lm(intent1~havephys+physrec+lump+womrel+suscept1+severe1+benefit1+barrier1, data=ds)
Model3
Model1Coef    <-round(summary(Model1)$coefficients[,1], digits=3)
Model1Coef    <-c(Model1Coef, ".",".",".",".",".",".")
Model1Se      <-round(summary(Model1)$coefficients[,2], digits=3)
Model1Se      <-c(Model1Se, ".",".",".",".",".",".")
Model1subtable<-cbind(Model1Coef, Model1Se)
Model2Coef    <-round(summary(Model2)$coefficients[,1], digits=3)
Model2Coef    <-c(Model2Coef, ".",".",".",".")
Model2Se      <-round(summary(Model2)$coefficients[,2], digits=3)
Model2Se      <-c(Model2Se, ".",".",".",".")
Model2subtable<-cbind(Model2Coef, Model2Se)
Model3Coef    <-round(summary(Model3)$coefficients[,1], digits=3)
Model3Se      <-round(summary(Model3)$coefficients[,2], digits=3)
Model3subtable<-cbind(Model3Coef, Model3Se)
hrtable<-cbind(Model1subtable, Model2subtable, Model3subtable)
hrtable<-data.frame(hrtable)
hrtable1<-hrtable[2:9,]
hrtable1<-data.frame(hrtable1, row.names=c("havephys", "physrec", "lump", "womrel", "suscept1", "severe1", "benefit1", "barrier1"))
yhavephys <-cor(x=ds$havephys, y=ds$intent1)
yphysrec  <-cor(x=ds$physrec, y=ds$intent1)
ylump     <-cor(x=ds$lump, y=ds$intent1)
ywomrel   <-cor(x=ds$womrel, y=ds$intent1)
ysuscept  <-cor(x=ds$suscept1, y=ds$intent1)
ysevere   <-cor(x=ds$severe1, y=ds$intent1)
ybenefit  <-cor(x=ds$benefit1, y=ds$intent1)
ybarrier  <-cor(x=ds$barrier, y=ds$intent1)
cor.with.y<-round(as.vector(c(yhavephys, yphysrec, ylump, ywomrel, ysuscept, ysevere, ybenefit, ybarrier)), digits=3)
Q1table<-cbind(cor.with.y, hrtable1)
Q1table
#Question 2
anova(Model1, Model2, Model3)
rm(list = ls(all.names = TRUE))
library(foreign)
#Reading in Data
ds<-read.table("health.dat")
colnames(ds)<-c("case", "age", "income", "havephys", "physrec", "womrel", "lump", "suscept1", "severe1", "benefit1", "barrier1", "intent1", "comply")
#Question1
Model1<-lm(intent1~havephys+physrec,data=ds)
Model1
Model2<-lm(intent1~havephys+physrec+lump+womrel, data=ds)
Model2
Model3<-lm(intent1~havephys+physrec+lump+womrel+suscept1+severe1+benefit1+barrier1, data=ds)
Model3
Model1Coef    <-round(summary(Model1)$coefficients[,1], digits=3)
Model1Coef    <-c(Model1Coef, ".",".",".",".",".",".")
Model1Se      <-round(summary(Model1)$coefficients[,2], digits=3)
Model1Se      <-c(Model1Se, ".",".",".",".",".",".")
Model1subtable<-cbind(Model1Coef, Model1Se)
Model2Coef    <-round(summary(Model2)$coefficients[,1], digits=3)
Model2Coef    <-c(Model2Coef, ".",".",".",".")
Model2Se      <-round(summary(Model2)$coefficients[,2], digits=3)
Model2Se      <-c(Model2Se, ".",".",".",".")
Model2subtable<-cbind(Model2Coef, Model2Se)
Model3Coef    <-round(summary(Model3)$coefficients[,1], digits=3)
Model3Se      <-round(summary(Model3)$coefficients[,2], digits=3)
Model3subtable<-cbind(Model3Coef, Model3Se)
hrtable<-cbind(Model1subtable, Model2subtable, Model3subtable)
hrtable<-data.frame(hrtable)
hrtable1<-hrtable[2:9,]
hrtable1<-data.frame(hrtable1, row.names=c("havephys", "physrec", "lump", "womrel", "suscept1", "severe1", "benefit1", "barrier1"))
yhavephys <-cor(x=ds$havephys, y=ds$intent1)
yphysrec  <-cor(x=ds$physrec, y=ds$intent1)
ylump     <-cor(x=ds$lump, y=ds$intent1)
ywomrel   <-cor(x=ds$womrel, y=ds$intent1)
ysuscept  <-cor(x=ds$suscept1, y=ds$intent1)
ysevere   <-cor(x=ds$severe1, y=ds$intent1)
ybenefit  <-cor(x=ds$benefit1, y=ds$intent1)
ybarrier  <-cor(x=ds$barrier, y=ds$intent1)
cor.with.y<-round(as.vector(c(yhavephys, yphysrec, ylump, ywomrel, ysuscept, ysevere, ybenefit, ybarrier)), digits=3)
Q1table<-cbind(cor.with.y, hrtable1)
Q1table
#Question 2
Modelnull<-lm(intent1~1, data=ds)
anoba(Modelnull, Model1, Model2, Model3)
anova(Modelnull, Model1, Model2, Model3)
summary(anova(Modelnull, Model1, Model2, Model3))
summary(Model1)
summary(Modelnull)
denom<-(1-.029)/(287-2-1)
num<-(.029)/(2)
denom<-(1-.029)/(287-2-1)
num/denom
summary(Model1)
num<-(.022)/(2)
denom<-(1-.022)/(287-2-1)
num/denom
num<-(.02899)/(2)
denom<-(1-.02899)/(287-2-1)
num/denom
num<-(.02899)/(2)
denom<-(1-.02899)/(287-3)
num/denom
anova(Modelnull, Model1, Model2, Model3)
(1-.029)/(287-3)
(287-3)
denom<-(1-.029)/(287-3)
num/denom
num<-(.029)/(2)
denom<-(1-0.029)/(287-3)
num/denom
summary(Model2)
num<-(.039-.022)/(2)
denom<-(1-0.039)/(287-5)
num/denom
num<-(.039-.029)/(2)
denom<-(1-0.029)/(287-5)
num/denom
num<-(.052-.029)/(2)
denom<-(1-0.052)/(287-5)
num/denom
num<-(.052-.029)/(2)
denom<-(1-0.052)/(287-5)
num/denom
num<-(.119-.052)/(4)
denom<-(1-.119)/(287-9)
num/denom
anova(Modelnull, Model1, Model2, Model3)
anova(Model1, Model2, Model3)
num<-(.052-.029)/(2)
denom<-(1-.052)/(287-5)
num/denom
num<-(.119-.052)/(4)
denom<-(1-.119)/(287-9)
num/denom
anova(Modelnull, Model1, Model2, Model3)
summary(Model1)
summary(Model2)
num<-(.05199-.022)/(2)
denom<-(1-.05199)/(287-5)
num/denom
anova( Model1, Model2, Model3)
num<-(.03854-.022)/(2)
denom<-(1-.03854)/(287-5)
num/denom
num<-(.03854-.029)/(2)
denom<-(1-.03854)/(287-5)
num/denom
num<-(.052-.029)/(2)
denom<-(1-.052)/(287-5)
num/denom
anova( Model1, Model2, Model3)
num<-(.05199-.02899)/(2)
denom<-(1-.05199)/(287-5)
num/denom
