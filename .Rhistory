aucList<-length(max(ptProcessDat$r))-1
accList<-length(max(ptProcessDat$r))-1
fprList<-length(max(ptProcessDat$r))-1
tprList<-length(max(ptProcessDat$r))-1
fnrList<-length(max(ptProcessDat$r))-1
tnrList<-length(max(ptProcessDat$r))-1
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
aucList<-length(max(ptProcessDat$r))-1
accList<-length(max(ptProcessDat$r))-1
fprList<-length(max(ptProcessDat$r))-1
tprList<-length(max(ptProcessDat$r))-1
fnrList<-length(max(ptProcessDat$r))-1
tnrList<-length(max(ptProcessDat$r))-1
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="trp")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
fprList[i-1]<-as.numeric(perfSubsetFPR@y.values)
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, measure="acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
#perfSubsetACC<-performance(predSubset, measure="acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
#accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetAUC
perfSubsetACC<-performance(predSubset, measure="acc")
perfSubsetACC
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetFPR
install.package("OptimalCutpoints.r")
install.packages("OptimalCutpoints.r")
library(OptimalCutpoints)
library(OptimalCutpoints)
library(survival)
library(ROCR)
library(foreign)
install.packages("OptimalCutpoints.r")
library(OptimalCutpoints)
getwd()
install.packages("Epi.r")
library(Epi)
install.packages("survivalROC.r")
perfSubsetACC@y.values
perfSubsetACC
?performance()
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
#perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset,"auc", "acc")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-as.numeric(perfSubsetACC@y.values)
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetACC<-performance(predSubset,"auc", "acc")
perfSubsetACC
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetACC
max(as.numeric(perfSubsetACC@y.values))
perfSubsetACC@y.values
as.numeric(perfSubsetACC@y.values)
max(perfSubsetACC@y.values)
class(perfSubsetACC@y.values)
str(perfSubsetACC@y.values)
maximum(perfSubsetACC@y.values)
max(perfSubsetACC@y.values)
which.max(perfSubsetACC@y.values)
which.max(as.numeric(perfSubsetACC@y.values))
?which.max()
which.max(as.numeric(unlist(perfSubsetACC@y.values)))
which.max(as.numeric(unlist(perfSubsetACC@y.values)))
as.numeric(unlist(perfSubsetACC@y.values))
max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
max(as.numeric(unlist(perfSubsetFPR@y.values)))
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetFPR@y.values
max(as.numeric(unlist(perfSubsetACC@y.values)))
max(as.numeric(unlist(perfSubsetFPR@y.values)))
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
tprList[i-1]<-as.numeric(perfSubsetTPR@y.values)
fnrList[i-1]<-as.numeric(perfSubsetFNR@y.values)
tnrList[i-1]<-as.numeric(perfSubsetTNR@y.values)
}
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetAUC<-performance(predSubset, measure="auc")
perfSubsetACC<-performance(predSubset, "acc")
perfSubsetFPR<-performance(predSubset, measure="fpr")
perfSubsetTPR<-performance(predSubset, measure="tpr")
perfSubsetFNR<-performance(predSubset, measure="fnr")
perfSubsetTNR<-performance(predSubset, measure="tnr")
aucList[i-1]<-as.numeric(perfSubsetAUC@y.values)
accList[i-1]<-max(as.numeric(unlist(perfSubsetACC@y.values)))
fprList[i-1]<-max(as.numeric(unlist(perfSubsetFPR@y.values)))
tprList[i-1]<-max(as.numeric(unlist(perfSubsetTPR@y.values)))
fnrList[i-1]<-max(as.numeric(unlist(perfSubsetFNR@y.values)))
tnrList[i-1]<-max(as.numeric(unlist(perfSubsetTNR@y.values)))
}
AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(AucIntervalPair)
plot(AccIntervalPair)
FprIntervalPair<-cbind(c(1:length(fprList)),fprList)
plot(FprIntervalPair)
TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
plot(AccIntervalPair)
plot(TprIntervalPair)
FnrIntervalPair<-cbind(c(1:length(fnrList)),fnrList)
plot(FnrIntervalPair)
plot(AccIntervalPair)
plot(FnrIntervalPair)
TnrIntervalPair<-cbind(c(1:length(tnrList)),tnrList)
plot(TnrIntervalPair)
plot(AccIntervalPair)
dsAddictsEx<-cbind(ptProcessDat, HFR90, HFR4080120)
for(i in 2:max(ptProcessDat$r)){
dsSubset<-ptProcessDat[ptProcessDat$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90accList[i-1]<-max(as.numeric(unlist(perfSubsetHF90ACC@y.values)))
HF90fprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FPR@y.values)))
HF90tprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TPR@y.values)))
HF90fnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FNR@y.values)))
HF90tnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TNR@y.values)))
}
dsSubset<-ptProcessDat[ptProcessDat$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
HFR90<-as.integer()
length(HFR90)<-length(ptProcessDat$Subject)
for(i in 1:length(ptProcessDat$Subject)){
HFR90[i]<-ifelse(ptProcessDat[i,8]<428, 0, 1)
}
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
HFR90
Clinic
dsSubset$Clinic
dsSubset<-dsAddictsEx[dsAddictsEx$r<=90,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90aucList<-length(max(ptProcessDat$r))-1
HF90accList<-length(max(ptProcessDat$r))-1
HF90fprList<-length(max(ptProcessDat$r))-1
HF90tprList<-length(max(ptProcessDat$r))-1
HF90fnrList<-length(max(ptProcessDat$r))-1
HF90tnrList<-length(max(ptProcessDat$r))-1
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
perfSubsetHF90TNR
for(i in 2:max(dsAddictsEx$r)){
dsSubset<-dsAddictsEx[dsAddictsEx$r<=i,]
glmSubset<-glm(yir ~ I(as.factor(r)) + Clinic + Clinic*HFR90 + Prison + Dose + offset(I(log(dir))), family=poisson(link = "log"), data=dsSubset)
predSubset<-prediction(glmSubset$linear.predictors, dsSubset$yir)
perfSubsetHF90AUC<-performance(predSubset, measure="auc")
perfSubsetHF90ACC<-performance(predSubset, "acc")
perfSubsetHF90FPR<-performance(predSubset, measure="fpr")
perfSubsetHF90TPR<-performance(predSubset, measure="tpr")
perfSubsetHF90FNR<-performance(predSubset, measure="fnr")
perfSubsetHF90TNR<-performance(predSubset, measure="tnr")
HF90aucList[i-1]<-as.numeric(perfSubsetHF90AUC@y.values)
HF90accList[i-1]<-max(as.numeric(unlist(perfSubsetHF90ACC@y.values)))
HF90fprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FPR@y.values)))
HF90tprList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TPR@y.values)))
HF90fnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90FNR@y.values)))
HF90tnrList[i-1]<-max(as.numeric(unlist(perfSubsetHF90TNR@y.values)))
}
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(AccIntervalPair)
HF90FprIntervalPair<-cbind(c(1:length(fprList)),fprList)
plot(FprIntervalPair)
HF90TprIntervalPair<-cbind(c(1:length(tprList)),tprList)
plot(TprIntervalPair)
HF90FnrIntervalPair<-cbind(c(1:length(fnrList)),fnrList)
plot(FnrIntervalPair)
HF90TnrIntervalPair<-cbind(c(1:length(tnrList)),tnrList)
plot(TnrIntervalPair)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair)
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(HF90AccIntervalPair)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
plot(HF90AccIntervalPair)
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
HF90AccIntervalPair<-cbind(c(1:length(accList)),accList)
HF90AucIntervalPair<-cbind(c(1:length(aucList)),aucList)
plot(HF90AucIntervalPair, col=c("red"))
par(new=TRUE)
plot(AucIntervalPairs, xlab=c("Intervals, r, defined by unique event times"), ylab=c("AUC"))
rm(list = ls(all.names = TRUE))
library(survsim)
library(survival)
library(foreign)
X1<-rbinom(500, 1, 0.5)
X2<-rbinom(500, 1, 0.5)
X3<-rbinom(500, 1, 0.5)
X4<-rbinom(500, 1, 0.5)
X5<-X1*X3
X6<-X2*X3
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
X1<-rbinom(500, 1, 0.5)
X2<-rbinom(500, 1, 0.5)
X3<-rbinom(500, 1, 0.5)
X4<-rbinom(500, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
weibullTest
X1<-rbinom(500, 1, 0.5)
X2<-rbinom(500, 1, 0.5)
X3<-rbinom(500, 1, 0.5)
X4<-rbinom(500, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
X1<-rbinom(500, 1, 0.5)
X2<-rbinom(500, 1, 0.5)
X3<-rbinom(500, 1, 0.5)
X4<-rbinom(500, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
X1<-rbinom(5000, 1, 0.5)
X2<-rbinom(5000, 1, 0.5)
X3<-rbinom(5000, 1, 0.5)
X4<-rbinom(5000, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
X1<-rbinom(500, 1, 0.5)
X2<-rbinom(500, 1, 0.5)
X3<-rbinom(500, 1, 0.5)
X4<-rbinom(500, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(500)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
write.csv(dsNew, file="survtTestControl.csv")
getwed()
getwd()
X1<-rbinom(5000, 1, 0.5)
X2<-rbinom(5000, 1, 0.5)
X3<-rbinom(5000, 1, 0.5)
X4<-rbinom(5000, 1, 0.5)
X5<-X1*X3
X6<-X2*X4
U<-runif(5000)
scale<-1
negUlog<--1*log(U)
betaVector<-c(0.7, 0.7, 0.1, 0.1, 0.7, 0.7)
hf<-scale*(exp(X1*betaVector[1]+X2*betaVector[2]+X3*betaVector[3]+X4*betaVector[4]+X5*betaVector[5]+X6*betaVector[6]))
T<-negUlog/hf
T<-T*100
status<-1
dsNew<-cbind(X1, X2, X3, X4, X5, X6, scale, U, negUlog, hf, T, status)
dsNew<-as.data.frame(dsNew)
survobject<-Surv(time=dsNew$T, event=dsNew$status)
coxphTest<-coxph(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew)
weibullTest<-survreg(survobject~X1 + X2 + X3 + X4 + X5 + X6, data=dsNew, dist="weibull")
coxphTest
write.csv(dsNew, file="survtTestControl.csv")
library(foreign)
setwd("~/GitHub/PSY5013_HW")
ds<-read.csv("gpa.csv")
head(ds)
colnames(ds)
dsGPAlow<-ds[ds$GPA<2,]
dsGPAlow
dsGPAhigh<-ds[ds$GPA>=2,]
dsGPAhigh
summary(Prevach)
summary(ds$Prevach)
dsPrevachHigh<-ds[ds$Prevach>=50.53,]
dsPrevachLow<-ds[ds$Prevach<50.53,]
dsPrevachLow
dsPrevachHigh
library(psych)
?psych()
Highach<-ifelse(Prevach<50.53, 0, 1)
Highach<-ifelse(ds$Prevach<50.53, 0, 1)
Highach
ds<-cbind(ds, Highach)
t.test(ds$GPA~Highach)
mean(ds$gpa[ds$Highach=1,])
mean(ds$gpa[ds$Highach=1])
mean(ds$gpa)
dsHighach<-ds[ds$Highach=1,]
dsHighach<-ds[ds$Highach==1,]
dsLowach<-ds[ds$Highach==0,]
mean(dsHighach$GPA)
test<-t.test(ds$GPA~Highach)
str(test)
var(dsHighach$GPA)
sampleVarHigh<-var(dsHighach$GPA)
sampleStdvHigh<-sqrt(sampleVarHigh)
sampleStdvHigh
sampleStdvHigh<-sqrt(sampleVarHigh)
sampleStdvHigh
length(dsHighach)
length(dsHighach$GPA)
mean(dsLowach$GPA)
test<-t.test(ds$GPA~Highach)
test
plot(ds$GPA, ds$SAT)
attach(ds)
detach(ds)
plot(GPA, SAT, data=ds)
attach(ds)
plot(GPA, SAT)
install.packages("influence.ME")
library(influence.ME)
model1<-glm(GPA~SAT, data=ds)
model1
inf1<-influence(model, obs=TRUE)
model1<-glm(GPA~SAT, data=ds)
inf1<-influence(model, obs=TRUE)
?influence()
inf1<-influence(model1, obs=TRUE)
model1<-lmer(GPA~SAT, data=ds)
?lme4()
model1<-lme4(GPA~SAT, data=ds)
install.packages("lme4")
install.packages("lme4")
library(lme4)
model1<-lme4(GPA~SAT, data=ds)
model1<-lme(GPA~SAT, data=ds)
model1<-lm(GPA~SAT, data=ds)
hatvalues(model1)
hv<-as.data.frame(hatvalues(fit))
hv<-as.data.frame(hatvalues(model1))
mn<-mean(hatvalues(model1))
hv$warn<-ifelse(hv[,'hatvalues(model1']>3*mn, x3,
ifelse(hv[,'hatvalues(model1']>2*mn, x2, 0))
hv$warn<-ifelse(hv[,'hatvalues(model1)']>3*mn, x3,
ifelse(hv[,'hatvalues(model1)']>2*mn, x2, 0))
hv$warn<-ifelse(hv[,'hatvalues(model1)']>3*mn, "x3",
ifelse(hv[,'hatvalues(model1)']>2*mn, "x2", 0))
hv
model1
mn
cbind(ds, hv)
plot(hatvalues(model1, type=""))
plot(model1)
